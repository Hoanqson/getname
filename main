local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

local CONFIG = {
    targetNames = {"Bond"},
    espColor = Color3.fromRGB(0, 191, 255),
    maxDistance = 1000,
    updateInterval = 1,
    refreshInterval = 5,
    toggleKey = Enum.KeyCode.B,
    espSize = UDim2.new(0, 200, 0, 50),
    espFont = Enum.Font.SourceSansBold,
    espTextSize = 16,
    espTextStrokeTransparency = 0,
    espTextStrokeColor = Color3.new(0, 0, 0),
    guiFrameSize = UDim2.new(0, 250, 0, 280),
    guiFramePosition = UDim2.new(0.5, -125, 0.2, 0),
    guiBackgroundColor = Color3.fromRGB(40, 40, 40),
    guiBackgroundTransparency = 0.1,
    guiBorderColor = Color3.fromRGB(0, 255, 255),
    guiBorderThickness = 3,
    guiTitleColor = Color3.fromRGB(0, 255, 255),
    guiButtonColor = Color3.fromRGB(0, 150, 255),
    guiToggleOnColor = Color3.fromRGB(220, 50, 50),
    guiToggleOffColor = Color3.fromRGB(50, 180, 50),
    miniButtonSize = UDim2.new(0, 50, 0, 50),
    miniButtonPosition = UDim2.new(0, 20, 0, 20),
    miniButtonColor = Color3.fromRGB(40, 40, 40),
    miniButtonBackgroundTransparency = 0.1,
    miniButtonTextColor = Color3.fromRGB(0, 200, 255),
    miniButtonText = "ESP",
    miniButtonTextSize = 10,
    miniButtonToggleKey = Enum.KeyCode.RightControl,
    notificationDuration = 3,
    walkSpeed = 20,
    walkStopDistance = 3,
    walkUpdateRate = 0.1,
    originalWalkSpeed = nil,
    walkPathColor = Color3.fromRGB(255, 255, 0),
    showWalkPath = false,
    continuousWalk = true,
    walkRetryInterval = 1,
    maxWalkRetries = 10,
    noclipToggleKey = Enum.KeyCode.N,
    interactKey = Enum.KeyCode.E,
    interactToggleKey = Enum.KeyCode.G,
    interactInterval = 0.1,
    interactDistance = 3,
    debugMode = false
}

local espEnabled = false
local allESPObjects = {}
local foundItems = {}
local updateTask = nil
local refreshTask = nil
local gui = nil
local miniButton = nil
local miniButtonGui = nil
local guiVisible = true
local isWalking = false
local walkTask = nil
local walkPath = nil
local currentTargetItem = nil
local walkRetryCount = 0
local walkRetryTask = nil

local noclipEnabled = false
local noclipConnection = nil
local autoInteractEnabled = false
local autoInteractConnection = nil
local showNotifications = false

local stopWalking
local walkToNearestItem
local getNearestItem
local toggleMainGUI
local createMiniButton
local toggleNoclip
local toggleAutoInteract
local showNotification

local function safeGetPosition(object)
    if not object or typeof(object) ~= "Instance" or not object:IsDescendantOf(game) then
        return hrp.Position
    end
    
    local position = nil
    local success = pcall(function()
        if object:IsA("BasePart") then
            position = object.Position
        elseif object:IsA("Model") or object:IsA("Tool") or object:IsA("Accessory") then
            position = object:GetPivot().Position
        elseif object.PrimaryPart then
            position = object.PrimaryPart.Position
        else
            for _, child in ipairs(object:GetDescendants()) do
                if child:IsA("BasePart") then
                    position = child.Position
                    break
                end
            end
        end
    end)
    
    if not success or not position then
        return hrp.Position
    end
    
    return position
end

local function createESP(part, name)
    if not part or not part:IsDescendantOf(game) then return nil, nil end
    
    local position = safeGetPosition(part)
    local distance = (hrp.Position - position).Magnitude
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ItemESP"
    billboard.AlwaysOnTop = true
    billboard.Size = CONFIG.espSize
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.Adornee = part
    
    local label = Instance.new("TextLabel")
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = name .. " [" .. math.floor(distance) .. "m]"
    label.TextColor3 = CONFIG.espColor
    label.TextStrokeColor3 = CONFIG.espTextStrokeColor
    label.TextStrokeTransparency = CONFIG.espTextStrokeTransparency
    label.TextSize = CONFIG.espTextSize
    label.Font = CONFIG.espFont
    label.TextScaled = false
    label.Parent = billboard
    
    local parent = game:GetService("CoreGui")
    pcall(function()
        billboard.Parent = parent
    end)
    
    table.insert(allESPObjects, billboard)
    
    return billboard, label
end

local function updateESPObjects()
    local i = 1
    while i <= #allESPObjects do
        local object = allESPObjects[i]
        if not object or not object.Parent then
            table.remove(allESPObjects, i)
        else
            i = i + 1
        end
    end
    
    i = 1
    while i <= #foundItems do
        local item = foundItems[i]
        if not item or not item.part or not item.part:IsDescendantOf(game) or not item.billboard or not item.billboard.Parent then
            if item and item.billboard and item.billboard.Parent then
                item.billboard:Destroy()
            end
            
            if currentTargetItem and currentTargetItem == item then
                currentTargetItem = nil
                
                if isWalking and CONFIG.continuousWalk then
                    task.spawn(function()
                        task.wait(0.5)
                        walkToNearestItem(true)
                    end)
                end
            end
            
            table.remove(foundItems, i)
        else
            i = i + 1
        end
    end
end

local function findItems()
    if not espEnabled then return {} end
    
    updateESPObjects()
    
    local count = 0
    local newItems = {}
    local foundItemsMap = {}
    
    for _, item in ipairs(foundItems) do
        if item.part and item.part:IsDescendantOf(game) and item.billboard and item.billboard.Parent then
            local keep = false
            for _, targetName in ipairs(CONFIG.targetNames) do
                if item.part.Name == targetName then
                    local position = safeGetPosition(item.part)
                    local distance = (hrp.Position - position).Magnitude
                    
                    if distance <= CONFIG.maxDistance then
                        foundItemsMap[item.part] = true
                        table.insert(newItems, item)
                        keep = true
                        count = count + 1
                        break
                    end
                end
            end
            
            if not keep and item.billboard then
                pcall(function() item.billboard:Destroy() end)
            end
        end
    end
    
    local function searchInModel(model)
        if not espEnabled then return end
        
        for _, v in pairs(model:GetChildren()) do
            if not espEnabled then return end
            
            for _, targetName in ipairs(CONFIG.targetNames) do
                if v.Name == targetName and not foundItemsMap[v] then
                    local position = safeGetPosition(v)
                    local distance = (hrp.Position - position).Magnitude
                    
                    if distance <= CONFIG.maxDistance then
                        count = count + 1
                        if CONFIG.debugMode then
                            print("Đã tìm thấy " .. v.Name .. " #" .. count .. " tại vị trí: " .. tostring(position) .. " (Khoảng cách: " .. math.floor(distance) .. "m)")
                        end
                        
                        local billboard, label = createESP(v, v.Name)
                        if billboard and label then
                            foundItemsMap[v] = true
                            table.insert(newItems, {
                                part = v,
                                billboard = billboard,
                                label = label,
                                lastPosition = position
                            })
                        end
                    end
                end
            end
            
            if #v:GetChildren() > 0 then
                searchInModel(v)
            end
        end
    end
    
    pcall(function()
        searchInModel(game.Workspace)
    end)
    
    if CONFIG.debugMode then
        if count > 0 then
            print("Đã tìm thấy tổng cộng " .. count .. " vật phẩm phù hợp")
        else
            print("Không tìm thấy vật phẩm nào phù hợp trong Workspace")
        end
    end
    
    return newItems
end

local function updateESPLabels()
    if not espEnabled then return end
    
    updateESPObjects()
    
    for _, item in ipairs(foundItems) do
        if item.part and item.part:IsDescendantOf(game) and item.label and item.label.Parent then
            pcall(function()
                local position = safeGetPosition(item.part)
                local distance = (hrp.Position - position).Magnitude
                
                if distance <= CONFIG.maxDistance then
                    item.label.Text = item.part.Name .. " [" .. math.floor(distance) .. "m]"
                    item.lastPosition = position
                end
            end)
        end
    end
end

function showNotification(message, duration)
    if not showNotifications then return end
    
    duration = duration or CONFIG.notificationDuration
    
    local notification = Instance.new("ScreenGui")
    notification.Name = "ESPNotification"
    notification.ResetOnSpawn = false
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 250, 0, 60)
    frame.Position = UDim2.new(0.5, -125, 0.85, 0)
    frame.BackgroundColor3 = CONFIG.guiBackgroundColor
    frame.BackgroundTransparency = CONFIG.guiBackgroundTransparency
    frame.BorderSizePixel = CONFIG.guiBorderThickness
    frame.BorderColor3 = CONFIG.guiBorderColor
    frame.Parent = notification
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = message
    textLabel.TextColor3 = Color3.new(1, 1, 1)
    textLabel.TextSize = 16
    textLabel.Font = CONFIG.espFont
    textLabel.Parent = frame
    
    local success = pcall(function()
        notification.Parent = game:GetService("CoreGui")
    end)
    
    if not success then
        notification.Parent = player.PlayerGui
    end
    
    task.spawn(function()
        task.wait(duration)
        notification:Destroy()
    end)
    
    return notification
end

getNearestItem = function()
    local nearest = nil
    local minDistance = math.huge
    
    for _, item in ipairs(foundItems) do
        if item.part and item.part:IsDescendantOf(game) then
            local position = safeGetPosition(item.part)
            local distance = (hrp.Position - position).Magnitude
            
            if distance < minDistance then
                minDistance = distance
                nearest = item
            end
        end
    end
    
    return nearest, minDistance
end

local function toggleESP()
    espEnabled = not espEnabled
    
    if espEnabled then
        foundItems = findItems()
        
        if updateTask then
            pcall(function() 
                updateTask:Cancel()
                updateTask = nil
            end)
        end
        
        updateTask = task.spawn(function()
            while espEnabled do
                updateESPLabels()
                task.wait(CONFIG.updateInterval)
            end
        end)
        
        if refreshTask then
            pcall(function() 
                refreshTask:Cancel()
                refreshTask = nil
            end)
        end
        
        refreshTask = task.spawn(function()
            while espEnabled do
                foundItems = findItems()
                task.wait(CONFIG.refreshInterval)
            end
        end)
    else
        if updateTask then
            pcall(function() 
                updateTask:Cancel()
                updateTask = nil
            end)
        end
        
        if refreshTask then
            pcall(function() 
                refreshTask:Cancel()
                refreshTask = nil
            end)
        end
        
        for _, obj in ipairs(allESPObjects) do
            pcall(function()
                obj:Destroy()
            end)
        end
        allESPObjects = {}
        foundItems = {}
    end
end

local function enableESP()
    if not espEnabled then
        toggleESP()
    end
end

local function disableESP()
    if espEnabled then
        toggleESP()
    end
end

local function changeTargetNames(newNames)
    CONFIG.targetNames = newNames
    
    if espEnabled then
        for _, obj in ipairs(allESPObjects) do
            pcall(function()
                obj:Destroy()
            end)
        end
        allESPObjects = {}
        
        foundItems = findItems()
    end
end

toggleNoclip = function()
    noclipEnabled = not noclipEnabled
    
    if noclipEnabled then
        if noclipConnection then
            pcall(function()
                noclipConnection:Disconnect()
                noclipConnection = nil
            end)
        end
        
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0.5
            end
        end
        
        noclipConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if character and character:IsDescendantOf(game) and humanoid and humanoid:IsDescendantOf(game) then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConnection then
            pcall(function()
                noclipConnection:Disconnect()
                noclipConnection = nil
            end)
        end
        
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
                part.Transparency = 0
            end
        end
    end
end

toggleAutoInteract = function()
    autoInteractEnabled = not autoInteractEnabled
    
    if autoInteractEnabled then
        if autoInteractConnection then
            pcall(function()
                autoInteractConnection:Disconnect()
                autoInteractConnection = nil
            end)
        end
        
        local virtualInputManager = game:GetService("VirtualInputManager")
        local lastInteractTime = tick()
        
        autoInteractConnection = game:GetService("RunService").Heartbeat:Connect(function()
            local currentTime = tick()
            if currentTime - lastInteractTime < CONFIG.interactInterval then
                return
            end
            
            local nearest, distance = getNearestItem()
            
            if nearest and distance <= CONFIG.interactDistance then
                virtualInputManager:SendKeyEvent(true, CONFIG.interactKey, false, game)
                task.wait(0.05)
                virtualInputManager:SendKeyEvent(false, CONFIG.interactKey, false, game)
                lastInteractTime = currentTime
            end
        end)
    else
        if autoInteractConnection then
            pcall(function()
                autoInteractConnection:Disconnect()
                autoInteractConnection = nil
            end)
        end
    end
end

local function moveToPosition(position)
    if not humanoid or not humanoid:IsDescendantOf(game) then return end
    
    humanoid:MoveTo(position)
end

stopWalking = function()
    isWalking = false
    
    if walkTask then
        pcall(function() 
            walkTask:Cancel()
            walkTask = nil
        end)
    end
    
    if walkRetryTask then
        pcall(function() 
            walkRetryTask:Cancel()
            walkRetryTask = nil
        end)
    end
    
    if CONFIG.originalWalkSpeed then
        humanoid.WalkSpeed = CONFIG.originalWalkSpeed
        CONFIG.originalWalkSpeed = nil
    end
    
    currentTargetItem = nil
    walkRetryCount = 0
end

walkToNearestItem = function(forceRestart)
    if isWalking and not forceRestart then
        stopWalking()
        return
    end
    
    local nearest, distance = getNearestItem()
    
    if not nearest then
        return
    end
    
    currentTargetItem = nearest
    isWalking = true
    
    if not CONFIG.originalWalkSpeed then
        CONFIG.originalWalkSpeed = humanoid.WalkSpeed
    end
    
    humanoid.WalkSpeed = CONFIG.walkSpeed
    
    if walkTask then
        pcall(function() 
            walkTask:Cancel()
            walkTask = nil
        end)
    end
    
    walkTask = task.spawn(function()
        while isWalking do
            if currentTargetItem and currentTargetItem.part and currentTargetItem.part:IsDescendantOf(game) then
                local position = safeGetPosition(currentTargetItem.part)
                local distance = (hrp.Position - position).Magnitude
                
                if distance <= CONFIG.walkStopDistance then
                    if CONFIG.debugMode then
                        print("Đã đến mục tiêu, khoảng cách: " .. math.floor(distance) .. "m")
                    end
                    
                    if not CONFIG.continuousWalk then
                        stopWalking()
                    end
                    
                    while isWalking and currentTargetItem and currentTargetItem.part and
                          currentTargetItem.part:IsDescendantOf(game) do
                        local newPosition = safeGetPosition(currentTargetItem.part)
                        local newDistance = (hrp.Position - newPosition).Magnitude
                        
                        if newDistance > CONFIG.walkStopDistance * 2 then
                            break
                        end
                        
                        task.wait(CONFIG.walkUpdateRate)
                    end
                    
                    if isWalking and CONFIG.continuousWalk then
                        local newNearest, newDistance = getNearestItem()
                        
                        if newNearest and newNearest ~= currentTargetItem then
                            currentTargetItem = newNearest
                            walkRetryCount = 0
                        else
                            stopWalking()
                        end
                    end
                else
                    moveToPosition(position)
                    
                    task.wait(CONFIG.walkUpdateRate)
                end
            else
                if isWalking and CONFIG.continuousWalk then
                    local newNearest, newDistance = getNearestItem()
                    
                    if newNearest then
                        currentTargetItem = newNearest
                        walkRetryCount = 0
                    else
                        stopWalking()
                    end
                else
                    stopWalking()
                end
            end
        end
    end)
end

createMiniButton = function()
    if miniButtonGui then
        pcall(function() miniButtonGui:Destroy() end)
        miniButtonGui = nil
    end
    
    miniButtonGui = Instance.new("ScreenGui")
    miniButtonGui.Name = "ESPMiniButtonGui"
    miniButtonGui.ResetOnSpawn = false
    miniButtonGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local success = pcall(function()
        miniButtonGui.Parent = player.PlayerGui
    end)
    
    if not success then
        pcall(function()
            miniButtonGui.Parent = game:GetService("CoreGui")
        end)
    end
    
    miniButton = Instance.new("TextButton")
    miniButton.Name = "MiniButton"
    miniButton.Size = CONFIG.miniButtonSize
    miniButton.Position = CONFIG.miniButtonPosition
    miniButton.BackgroundColor3 = CONFIG.miniButtonColor
    miniButton.BackgroundTransparency = CONFIG.miniButtonBackgroundTransparency
    miniButton.BorderSizePixel = 0
    miniButton.Text = CONFIG.miniButtonText
    miniButton.TextColor3 = CONFIG.miniButtonTextColor
    miniButton.TextSize = CONFIG.miniButtonTextSize
    miniButton.Font = Enum.Font.GothamBold
    miniButton.AutoButtonColor = true
    miniButton.Parent = miniButtonGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = miniButton
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = CONFIG.guiBorderColor
    stroke.Thickness = 2
    stroke.Parent = miniButton
    
    miniButton.MouseButton1Click:Connect(function()
        toggleMainGUI()
    end)
end

toggleMainGUI = function()
    if not gui then
        createGUI()
    end
    
    guiVisible = not guiVisible
    
    if gui then
        gui.Enabled = guiVisible
    end
    
    if guiVisible then
        if miniButtonGui then
            miniButtonGui.Enabled = false
        end
    else
        if not miniButtonGui then
            createMiniButton()
        else
            miniButtonGui.Enabled = true
        end
    end
end

local function createGUI()
    if gui then
        pcall(function() gui:Destroy() end)
        gui = nil
    end
    
    if miniButtonGui then
        pcall(function() miniButtonGui:Destroy() end)
        miniButtonGui = nil
    end
    
    gui = Instance.new("ScreenGui")
    gui.Name = "ESPControlGui"
    gui.ResetOnSpawn = false
    gui.DisplayOrder = 1000
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local userInputService = game:GetService("UserInputService")
    
    local success = false
    pcall(function()
        gui.Parent = player.PlayerGui
        success = true
        if CONFIG.debugMode then
            print("Đã đặt GUI vào PlayerGui")
        end
    end)
    
    if not success then
        pcall(function()
            gui.Parent = game:GetService("CoreGui")
            success = true
            if CONFIG.debugMode then
                print("Đã đặt GUI vào CoreGui")
            end
        end)
    end
    
    if not success then
        warn("Không thể tạo giao diện ESP Control")
        return nil
    end
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = CONFIG.guiFrameSize
    mainFrame.Position = CONFIG.guiFramePosition
    mainFrame.BackgroundColor3 = CONFIG.guiBackgroundColor
    mainFrame.BackgroundTransparency = CONFIG.guiBackgroundTransparency
    mainFrame.BorderSizePixel = CONFIG.guiBorderThickness
    mainFrame.BorderColor3 = CONFIG.guiBorderColor
    mainFrame.Parent = gui
    
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 8)
    uiCorner.Parent = mainFrame
    
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Color = Color3.fromRGB(0, 200, 255)
    uiStroke.Thickness = 2
    uiStroke.Parent = mainFrame
    
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.fromRGB(10, 10, 40)
    title.BackgroundTransparency = 0.1
    title.TextColor3 = CONFIG.guiTitleColor
    title.Text = "Menu esp"
    title.Font = Enum.Font.GothamBold
    title.TextSize = 16
    title.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = title
    
    local hideButton = Instance.new("TextButton")
    hideButton.Name = "HideButton"
    hideButton.Size = UDim2.new(0, 25, 0, 25)
    hideButton.Position = UDim2.new(1, -30, 0, 3)
    hideButton.BackgroundTransparency = 1
    hideButton.Text = "X"
    hideButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    hideButton.Font = Enum.Font.GothamBold
    hideButton.TextSize = 16
    hideButton.Parent = title
    
    hideButton.MouseButton1Click:Connect(function()
        toggleMainGUI()
    end)
    
    local itemNameLabel = Instance.new("TextLabel")
    itemNameLabel.Name = "ItemNameLabel"
    itemNameLabel.Size = UDim2.new(0.9, 0, 0, 20)
    itemNameLabel.Position = UDim2.new(0.05, 0, 0, 40)
    itemNameLabel.BackgroundTransparency = 1
    itemNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    itemNameLabel.Text = "Tên vật phẩm (ngăn cách bằng dấu phẩy):"
    itemNameLabel.Font = Enum.Font.SourceSansBold
    itemNameLabel.TextSize = 14
    itemNameLabel.TextXAlignment = Enum.TextXAlignment.Left
    itemNameLabel.Parent = mainFrame
    
    local textBox = Instance.new("TextBox")
    textBox.Name = "ItemNameInput"
    textBox.Size = UDim2.new(0.9, 0, 0, 30)
    textBox.Position = UDim2.new(0.05, 0, 0, 65)
    textBox.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.PlaceholderText = "Tên vật phẩm (ngăn cách bằng dấu phẩy)"
    textBox.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
    textBox.Text = table.concat(CONFIG.targetNames, ", ")
    textBox.Font = Enum.Font.Gotham
    textBox.TextSize = 14
    textBox.ClearTextOnFocus = false
    textBox.Parent = mainFrame
    
    local textBoxCorner = Instance.new("UICorner")
    textBoxCorner.CornerRadius = UDim.new(0, 6)
    textBoxCorner.Parent = textBox
    
    local applyButton = Instance.new("TextButton")
    applyButton.Name = "ApplyButton"
    applyButton.Size = UDim2.new(0.45, 0, 0, 30)
    applyButton.Position = UDim2.new(0.05, 0, 0, 105)
    applyButton.BackgroundColor3 = CONFIG.guiButtonColor
    applyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    applyButton.Text = "Áp dụng"
    applyButton.Font = Enum.Font.GothamBold
    applyButton.TextSize = 16
    applyButton.Parent = mainFrame
    
    local applyCorner = Instance.new("UICorner")
    applyCorner.CornerRadius = UDim.new(0, 6)
    applyCorner.Parent = applyButton
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0.45, 0, 0, 30)
    toggleButton.Position = UDim2.new(0.5, 0, 0, 105)
    toggleButton.BackgroundColor3 = espEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Text = espEnabled and "Tắt ESP" or "Bật ESP"
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 16
    toggleButton.Parent = mainFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 6)
    toggleCorner.Parent = toggleButton
    
    local walkButton = Instance.new("TextButton")
    walkButton.Name = "WalkButton"
    walkButton.Size = UDim2.new(0.9, 0, 0, 30)
    walkButton.Position = UDim2.new(0.05, 0, 0, 145)
    walkButton.BackgroundColor3 = Color3.fromRGB(255, 150, 0)
    walkButton.BackgroundTransparency = 0.2
    walkButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    walkButton.Text = isWalking and "Dừng đi bộ" or "Đi đến vật phẩm gần nhất"
    walkButton.Font = Enum.Font.GothamBold
    walkButton.TextSize = 14
    walkButton.Parent = mainFrame
    
    local walkCorner = Instance.new("UICorner")
    walkCorner.CornerRadius = UDim.new(0, 6)
    walkCorner.Parent = walkButton
    
    local noclipButton = Instance.new("TextButton")
    noclipButton.Name = "NoclipButton"
    noclipButton.Size = UDim2.new(0.45, 0, 0, 30)
    noclipButton.Position = UDim2.new(0.05, 0, 0, 185)
    noclipButton.BackgroundColor3 = noclipEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
    noclipButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    noclipButton.Text = noclipEnabled and "Tắt Noclip" or "Bật Noclip"
    noclipButton.Font = Enum.Font.GothamBold
    noclipButton.TextSize = 14
    noclipButton.Parent = mainFrame
    
    local noclipCorner = Instance.new("UICorner")
    noclipCorner.CornerRadius = UDim.new(0, 6)
    noclipCorner.Parent = noclipButton
    
    local autoInteractButton = Instance.new("TextButton")
    autoInteractButton.Name = "AutoInteractButton"
    autoInteractButton.Size = UDim2.new(0.45, 0, 0, 30)
    autoInteractButton.Position = UDim2.new(0.5, 0, 0, 185)
    autoInteractButton.BackgroundColor3 = autoInteractEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
    autoInteractButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    autoInteractButton.Text = autoInteractEnabled and "Tắt Auto-F" or "Bật Auto-F"
    autoInteractButton.Font = Enum.Font.GothamBold
    autoInteractButton.TextSize = 14
    autoInteractButton.Parent = mainFrame
    
    local autoInteractCorner = Instance.new("UICorner")
    autoInteractCorner.CornerRadius = UDim.new(0, 6)
    autoInteractCorner.Parent = autoInteractButton
    
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Name = "SpeedLabel"
    speedLabel.Size = UDim2.new(0.9, 0, 0, 20)
    speedLabel.Position = UDim2.new(0.05, 0, 0, 225)
    speedLabel.BackgroundTransparency = 1
    speedLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    speedLabel.Text = "Tốc độ đi : " .. CONFIG.walkSpeed .. " studs/giây\nScrtipy By HoanqSon2107<3N"
    speedLabel.Font = Enum.Font.SourceSans
    speedLabel.TextSize = 14
    speedLabel.Parent = mainFrame
    
    applyButton.MouseButton1Click:Connect(function()
        local input = textBox.Text
        if input ~= "" then
            local names = {}
            for name in string.gmatch(input, "[^,%s]+") do
                table.insert(names, name)
            end
            
            if #names > 0 then
                changeTargetNames(names)
            end
        end
    end)
    
    toggleButton.MouseButton1Click:Connect(function()
        toggleESP()
        toggleButton.Text = espEnabled and "Tắt ESP" or "Bật ESP"
        toggleButton.BackgroundColor3 = espEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
    end)
    
    walkButton.MouseButton1Click:Connect(function()
        if isWalking then
            stopWalking()
            walkButton.Text = "Đi đến vật phẩm gần nhất"
            walkButton.BackgroundColor3 = Color3.fromRGB(255, 150, 0)
        else
            walkToNearestItem()
            walkButton.Text = "Dừng đi bộ"
            walkButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
        end
    end)
    
    noclipButton.MouseButton1Click:Connect(function()
        toggleNoclip()
        
        noclipButton.Text = noclipEnabled and "Tắt Noclip" or "Bật Noclip"
        noclipButton.BackgroundColor3 = noclipEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
    end)
    
    autoInteractButton.MouseButton1Click:Connect(function()
        toggleAutoInteract()
        
        autoInteractButton.Text = autoInteractEnabled and "Tắt Auto-F" or "Bật Auto-F"
        autoInteractButton.BackgroundColor3 = autoInteractEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
    end)
    
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
    
    title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            uiStroke.Color = Color3.fromRGB(255, 165, 0)
            uiStroke.Thickness = 3
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    uiStroke.Color = Color3.fromRGB(0, 200, 255)
                    uiStroke.Thickness = 2
                end
            end)
        end
    end)
    
    title.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    userInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
    
    return gui
end

local function handleInput(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == CONFIG.toggleKey then
        toggleESP()
        
        if gui and gui.Enabled then
            local toggleButton = gui:FindFirstChild("MainFrame"):FindFirstChild("ToggleButton")
            if toggleButton then
                toggleButton.Text = espEnabled and "Tắt ESP" or "Bật ESP"
                toggleButton.BackgroundColor3 = espEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
            end
        end
    end
    
    if input.KeyCode == CONFIG.miniButtonToggleKey then
        if not guiVisible then
            toggleMainGUI()
        end
    end
    
    if input.KeyCode == CONFIG.noclipToggleKey then
        toggleNoclip()
        
        if gui and gui.Enabled then
            local noclipButton = gui:FindFirstChild("MainFrame"):FindFirstChild("NoclipButton")
            if noclipButton then
                noclipButton.Text = noclipEnabled and "Tắt Noclip" or "Bật Noclip"
                noclipButton.BackgroundColor3 = noclipEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
            end
        end
    end
    
    if input.KeyCode == CONFIG.interactToggleKey then
        toggleAutoInteract()
        
        if gui and gui.Enabled then
            local autoInteractButton = gui:FindFirstChild("MainFrame"):FindFirstChild("AutoInteractButton")
            if autoInteractButton then
                autoInteractButton.Text = autoInteractEnabled and "Tắt Auto-F" or "Bật Auto-F"
                autoInteractButton.BackgroundColor3 = autoInteractEnabled and CONFIG.guiToggleOnColor or CONFIG.guiToggleOffColor
            end
        end
    end
end

local function setupEvents()
    game:GetService("UserInputService").InputBegan:Connect(handleInput)
    
    player.CharacterAdded:Connect(function(newCharacter)
        character = newCharacter
        hrp = character:WaitForChild("HumanoidRootPart")
        humanoid = character:WaitForChild("Humanoid")
        
        if noclipEnabled then
            toggleNoclip()
            toggleNoclip()
        end
    end)
end

local function startScript()
    createGUI()
    setupEvents()
end

startScript()
